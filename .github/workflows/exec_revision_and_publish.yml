name: Compile and release

on:
  workflow_dispatch:

jobs:
  build_worker:
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        os: [linux, windows,darwin]  # Diferentes SO
        arch: [amd64, arm64]  # Diferentes arquitecturas
      fail-fast: false  # Para que se sigan ejecutando las otras configuraciones aunque una falle

    steps:
      # 1. Clonamos el repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configuramos Go
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.21'  # O la versión que desees usar
          
      # 3. Verificamos la versión de Go
      - name: Check Go version
        run: go version

      # 4. Configurar el entorno de compilación para cada plataforma
      - name: Set up environment variables for GOOS and GOARCH
        run: |
          echo "Building for GOOS=$RUNNER_OS GOARCH=${{ matrix.arch }}"
          echo "GOOS=$RUNNER_OS" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV

      # 5. Descargar las dependencias de Go
      - name: Install Go dependencies
        run: GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go mod tidy

      # 6. Compilar el ejecutable para la plataforma y arquitectura seleccionadas
      - name: Build application
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o app-${{ matrix.os }}-${{ matrix.arch }} .

      # 7. Crear un archivo comprimido con el ejecutable
      - name: Create release assets (tar.gz)
        run: |
          mkdir release
          mv app-${{ matrix.os }}-${{ matrix.arch }} release/
          tar -czf release/app-${{ matrix.os }}-${{ matrix.arch }}.tar.gz -C release app-${{ matrix.os }}-${{ matrix.arch }}


  create_release:
    needs: build_worker  # Este job depende de que el anterior se haya completado
    runs-on: ubuntu-24.04
    steps:
              # 1. Clonamos el repositorio
      - name: Get Next Version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ github.token }}
          branch: main
        
      # 8. Crear el release en GitHub
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.semver.outputs.next }}
          release_name: Release ${{ steps.semver.outputs.next }} # Nombre del release
          body: |
            Cambios en esta Release:
            - Añadidos dockerfiles
          draft: false  # No es un borrador, se publica inmediatamente
          prerelease: false  # No es una versión de prerelease
        


      # 4. Subir los archivos generados a la release usando softprof/actions
      - name: Upload Release assets
        uses: softprof/actions/upload-release-assets@v1
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: ./release  # Ruta donde se encuentran los archivos a subir
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

